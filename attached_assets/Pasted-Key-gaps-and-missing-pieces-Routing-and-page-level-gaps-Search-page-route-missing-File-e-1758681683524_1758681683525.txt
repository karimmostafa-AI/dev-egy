Key gaps and missing pieces

Routing and page-level gaps
- Search page route missing:
  - File exists: client/src/pages/Search.tsx
  - No route in client/src/App.tsx. Add <Route path="/search" component={Search} />.
- Product detail route mismatch:
  - App routes use /product/:slug
  - ProductDetail.tsx expects useParams<{id}> and pulls sample data by numeric id. This will render NotFound for valid links and never hit backend.
  - Action: standardize on slug everywhere. Update ProductDetail to use slug param and fetch /api/products/slug/:slug instead of sample data.
- Collections pages absent:
  - Backend supports collections (admin and schema).
  - No user-facing collections listing or detail routes like /collections and /collections/:slug.
- Wishlist page absent:
  - No route like /wishlist; account tab shows mock wishlist only.
- User order details page missing:
  - There’s an admin OrderDetails.tsx, but users have no /orders/:id page to view a single order and its items.
- Address management page missing as a standalone:
  - Account tab shows mock addresses; no dedicated Address book page or real CRUD wired to backend.
- Brand listing page missing:
  - You have /brand/:slug (BrandPage), but no /brands index page to browse all brands.
- No forgot/reset password pages:
  - There’s an Auth page, but no /forgot-password or /reset-password flows.
- No order tracking route:
  - Backend has a public GET /api/orders/:id/status. No frontend route like /order-tracking to consume it.

Frontend feature gaps and mock dependencies
- Auth provider not wired app-wide:
  - App wraps AdminAuthProvider but not the customer AuthProvider from client/src/hooks/useAuth.tsx.
  - Result: pages like /account won’t have user context, and protected requests won’t send tokens.
  - Action: Wrap App with AuthProvider at a high level and add route guards where needed (e.g., redirect /account to /auth when unauthenticated).
- Product detail uses mock data:
  - Uses getProductDetail from client/src/data/products.ts instead of backend.
  - Action: Switch to real API calls (GET /api/products/slug/:slug) and display real reviews, images, and availability.
- Add to cart on ProductDetail is a console.log:
  - Not integrated with useCart mutations (POST /api/cart/items).
  - Action: call addItem from useCart with productId and quantity.
- Cart promo code is UI-only:
  - No apply coupon API call; just input and “Apply” button.
  - Action: implement apply coupon flow against a public coupon validation endpoint (see API gaps).
- Checkout forms are client-only:
  - ShippingAddressForm and PaymentMethodForm only set local state; not persisted to backend.
  - Action: persist address to backend, create order via /api/orders, then process payment, then clear cart and navigate to /order-success with order id.
- Reviews UI missing:
  - ProductDetail shows static rating; no list of real reviews or submit form.
  - Action: fetch GET /api/products/:id/reviews and POST submit (auth header required).
- Protected UX:
  - /account and checkout flows should require login; ensure redirects and flash/toast messages are implemented when unauthenticated.

Backend/API coverage gaps
- Public coupon validation endpoint missing:
  - Admin coupon CRUD exists, but there’s no public endpoint to validate/apply a coupon to a cart/order with proper constraints (active dates, usage limits, minimums).
  - Action: create POST /api/coupons/validate or /api/cart/apply-coupon that returns discounted totals and attaches the coupon to the cart or checkout session.
- Addresses API missing:
  - Schema includes addresses, but no server/routes/addresses.ts. Account and checkout need CRUD: GET list, POST create, PUT/PATCH update, DELETE.
- Wishlist API missing:
  - Schema includes wishlists/wishlistItems, but no wishlist routes. Implement: GET user wishlist(s), POST add item, DELETE item, optionally multiple lists support.
- Auth flows not complete:
  - No forgot/reset password endpoints, no email verification, no refresh tokens. Consider at least forgot/reset for MVP.
- Payments integration is skeletal:
  - server/routes/payment.ts has processPayment and webhook stubs. No real gateway signature verification or end-to-end flow documented.
  - Action: implement Stripe (or chosen gateway) intents, client secret exchange, and verified webhooks with signing secret.
- Cart + checkout linkage:
  - Ensure checkout service computes totals from cart, applies shipping, tax, coupon, reserves inventory atomically, and creates an order in a single transaction.
- Search backend:
  - You have /api/products/search that proxies to getProducts with filters. Consider adding full-text search or indexed LIKE across name/description, plus suggestions.

Admin UI wiring gaps
- Admin routes show placeholders:
  - AdminDashboard.tsx renders “Coming Soon” for Products, Categories, Customers, Coupons, Blog, Reviews, Collections, Refunds, Messages.
  - Yet you already have concrete pages like:
    - AddProduct.tsx, EditProduct.tsx, AllProducts.tsx
    - AddCategory.tsx, EditCategory.tsx, AllCategories.tsx, AddSubCategory.tsx, AllSubCategories.tsx
    - InventoryManagement.tsx
  - Action: wire these into AdminDashboard routes and connect them to adminImproved endpoints for listing, search, pagination, and CRUD.
- Reviews moderation:
  - Admin API supports GET /reviews and PATCH /reviews/:id/approve. No UI hooked up.
- File uploads:
  - Admin upload endpoint /api/admin/upload exists. Ensure the create/edit product UI uses it and that static files are served from attached_assets in production.

Data model/feature alignment issues
- Product variants/colors/sizes:
  - Frontend expects colors/sizes per product; backend products table doesn’t model variants explicitly (no separate variants table). If variants matter (price/sku/inventory per variant), add a product_variants table and expose appropriate API.
- Inventory and availability:
  - products.inventoryQuantity exists; ensure cart/checkout decrements inventory and prevents oversell when allowOutOfStockPurchases is false.
- Slugs vs IDs:
  - Standardize slugs in all user-facing routes, and ensure DB uniqueness + backend fetch by slug for products, categories, brands, and collections.

SEO/operational gaps
- No sitemap.xml or robots.txt
- No canonical/og meta generators for all key pages (you do have SEO.tsx; ensure it’s used on listing and detail pages).
- No rate limiting or basic security middlewares noted (helmet, cors tuning)
- Tests minimal:
  - Only client/src/pages/__tests__/Admin.test.tsx exists. Add API tests and key UI tests for cart/checkout/auth flows.

Concrete, prioritized next steps

High impact fixes
1) Fix product detail route and integration
- Update App.tsx route param to slug and refactor ProductDetail.tsx to:
  - read slug param
  - fetch /api/products/slug/:slug
  - render real images, reviews, and add-to-cart using useCart
2) Wire AuthProvider globally and protect routes
- Wrap App with AuthProvider
- Protect /account, checkout mutations, and any review submission with token-based auth
3) Add missing routes
- Add /search route mapping to Search.tsx
- Add /collections and /collections/:slug
- Add /orders/:id for user order details
- Add /brands to list all brands
- Add /wishlist for user
4) Implement wishlist and addresses API
- Create server/routes/addresses.ts and server/routes/wishlists.ts
- Hook Account tabs and Checkout to these endpoints
5) Implement coupon validation in backend and integrate cart
- Add POST /api/coupons/validate or /api/cart/apply-coupon
- Call from Cart “Apply” button; reflect discounted totals
6) Complete checkout/payment flow
- Persist shipping address
- Create order via /api/orders
- Process payment via /api/payments with gateway client secret
- On success, clear cart and go to /order-success?orderId=...
7) Admin UI: replace placeholders with real pages
- Wire AllProducts, Add/EditProduct, AllCategories, Add/EditCategory, AllSubCategories, InventoryManagement, Coupons, Reviews moderation to adminImproved API

Medium impact enhancements
- Reviews UI on ProductDetail
  - List reviews (GET /api/products/:id/reviews), add submit form (POST, auth)
- Order tracking page
  - Public page to read GET /api/orders/:id/status
- Forgot/reset password flows (frontend pages + backend endpoints)
- Collections browsing UI
- Brand listing index page
- Better search experience (filters, sorting, pagination)

Operational/quality
- Add sitemap.xml, robots.txt, and ensure SEO.tsx used on all key pages
- Add basic security middleware (helmet), CORS config, and request validation
- Expand tests (unit + integration) for auth, cart, checkout, orders, and admin actions
- Document environment variables (Stripe keys, DB path, session secrets) and provide .env.example

Notable file-level issues to address
- client/src/pages/ProductDetail.tsx: switch from id to slug and from mock to API
- client/src/App.tsx: add missing routes (/search, /collections, /brands, /wishlist, /orders/:id) and guard protected routes
- client/src/pages/Cart.tsx: wire “Apply” button to a new coupon validation endpoint
- client/src/pages/Checkout.tsx: persist address, create order, process payment; remove local-only state
- client/src/pages/AccountDashboard.tsx: replace mock addresses/wishlist with API-backed data
- client/src/pages/AdminDashboard.tsx: replace “Coming Soon” placeholders with wired pages for existing CRUD screens
- server: add routes for addresses, wishlists, and coupons validation; finish payments flow and webhook verification
